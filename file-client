#!/usr/bin/env python3

import argparse
import json
import sys

from google.rpc import code_pb2
from grpc import RpcError
from grpc_status import rpc_status
from requests.exceptions import HTTPError

from clients.grpc_client import GrpcClient
from clients.rest_client import RestClient


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(prog='file-client')
    parser.add_argument('--backend', choices=['grpc', 'rest'], default='grpc',
                        help='Set a backend to be used, choices are grpc and rest. Default is grpc.')
    parser.add_argument('--grpc-server', default='localhost:50051',
                        help='Set a host and port of the gRPC server. Default is localhost:50051.')
    parser.add_argument('--base-url', default='http://localhost/',
                        help='Set a base URL for a REST server. Default is http://localhost/.')
    parser.add_argument('--cert-file', help='Set a path to a SSL certificate file.')
    parser.add_argument('--output', help='Set the file where to store the output. Default is -, i.e. the stdout.')

    parser.add_argument('subcommand', choices=['stat', 'read'],
                        help="'stat' prints the file metadata in a human-readable manner\n'read' outputs the file content")
    parser.add_argument('UUID')

    return parser.parse_args()


def main():
    args = parse_args()

    # choose a client based on --backend option
    if args.backend == 'grpc':
        client = GrpcClient(args.grpc_server, args.cert_file)
    elif args.backend == 'rest':
        client = RestClient(args.base_url, args.cert_file)
    else:
        print('Unrecognized backend option')
        sys.exit(1)

    # run client method corresponding to subcommand
    if args.subcommand == 'stat':
        data = client.stat(args.UUID)
        data = json.dumps(data, indent=4)
    elif args.subcommand == 'read':
        data = client.read(args.UUID)
    else:
        print('Unrecognized subcommand')
        sys.exit(1)

    # write data to given output
    binary_output = isinstance(data, bytes)
    if args.output:
        file_mode = 'wb' if binary_output else 'w'
        with open(args.output, file_mode) as output_file:
            output_file.write(data)
    else:
        if binary_output:
            sys.stdout.buffer.write(data)
        else:
            print(data)


if __name__ == '__main__':
    try:
        main()

    # unsuccessful HTTP status codes
    except HTTPError as httpe:
        if httpe.response.status_code == 404:
            print(f'File UUID not found.')
        else:
            print(f'Command failed due to HTTP error: {httpe}')
        sys.exit(1)

    # gRPC exceptions
    except RpcError as rpce:
        # try to get status code
        try:
            status = rpc_status.from_call(rpce.exception)
        except Exception:
            pass
        else:
            if status.code == code_pb2.NOT_FOUND:
                print(f'File UUID not found.')
                sys.exit(1)

        print(f'Command failed due to gRPC error: {rpce}')
        sys.exit(1)

    except Exception as e:
        print(f'Command failed due to unexpected error: {e!r}')
        sys.exit(1)
