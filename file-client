#!/usr/bin/env python3

import argparse
import sys
import json

from requests.exceptions import HTTPError

from clients.rest_client import RestClient


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(prog='file-client')
    parser.add_argument('--backend', choices=['grpc', 'rest'], default='grpc',
                        help='Set a backend to be used, choices are grpc and rest. Default is grpc.')
    parser.add_argument('--grpc-server', default='localhost:50051',
                        help='Set a host and port of the gRPC server. Default is localhost:50051.')
    parser.add_argument('--base-url', default='http://localhost/',
                        help='Set a base URL for a REST server. Default is http://localhost/.')
    parser.add_argument('--cert-file', help='Set a path to a SSL certificate file.')
    parser.add_argument('--output', help='Set the file where to store the output. Default is -, i.e. the stdout.')

    parser.add_argument('subcommand', choices=['stat', 'read'],
                        help="'stat' prints the file metadata in a human-readable manner\n'read' outputs the file content")
    parser.add_argument('UUID')

    return parser.parse_args()


def main():
    args = parse_args()

    if args.backend == 'grpc':
        print('gRPC not implemented')
        sys.exit(1)
    elif args.backend == 'rest':
        client = RestClient(args.base_url, args.cert_file)
    else:
        print('unrecognized option')
        sys.exit(1)

    binary_output = False
    if args.subcommand == 'stat':
        data = client.stat(args.UUID)
        data = json.dumps(data, indent=4)
    elif args.subcommand == 'read':
        data = client.read(args.UUID)
        binary_output = True
    else:
        print('unrecognized subcommand')
        sys.exit(1)

    if args.output:
        file_mode = 'wb' if binary_output else 'w'
        with open(args.output, file_mode) as output_file:
            output_file.write(data)
    else:
        if binary_output:
            sys.stdout.buffer.write(data)
        else:
            print(data)


if __name__ == '__main__':
    try:
        main()
    except HTTPError as he:
        if he.response.status_code == 404:
            print('file not found')
        else:
            print(f'unable to retrieve data due to: {he}')
        sys.exit(1)
    except Exception as e:
        print(f'unable to retrieve data due to: {e}')
        sys.exit(1)
